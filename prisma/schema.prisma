generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Patient {
<<<<<<< HEAD
  id                     Int       @id @default(autoincrement())
  mhrNo                  String    @default(dbgenerated("(substr(hex(randomblob(3)),1,6))"))
  uidNo                  String
  ipdNo                  String
  wardOrIcu              String
  bedRoomNo              String
  patientName            String?
  fatherName             String?
  age                    Int?
  sex                    String
  weight                 String?
  address                String?
  occupation             String?
  regNo                  String?
  dateOfAdmission        DateTime?
  dateOfDischarge        DateTime?
  dateOfOperation        String?
  surgeryPerformByDoctor String?
  anesthetistDoctor      String?
  performByDoctor        String?
  doctorIncharge         String?
  broughtBy              String?
  statusOfDischarge      String?
  dischargeSummary       String?
  icdCode                String?
  provisionalDiagnosis   String?
  finalDiagnosis         String?
}

model Doctor {
  id             Int    @id @default(autoincrement())
=======
  id              Int              @id @default(autoincrement())
  name            String
  gender          String
  dob             DateTime
  contact         String
  allergies       String?
  history         String?
  appointments    Appointment[]
  opdRecords      OPDRecord[]
  ipdAdmissions   IPDAdmission[]
  issuedMedicines IssuedMedicine[]
  billings        Billing[]
  LabTest         LabTest[]
  Doctor          Doctor?          @relation(fields: [doctorId], references: [id])
  doctorId        Int?
}

model Doctor {
  id             Int           @id @default(autoincrement())
>>>>>>> c00a5f06db257c64e0c99d1f392f8cf2bb00b1fc
  name           String
  department     String
  specialization String
  contact        String
<<<<<<< HEAD
}

model Appointment {
  id        Int      @id @default(autoincrement())
  patientId Int
=======
  patients       Patient[]
  appointments   Appointment[]
  opdRecords     OPDRecord[]
  labTests       LabTest[]
}


model Appointment {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
>>>>>>> c00a5f06db257c64e0c99d1f392f8cf2bb00b1fc
  doctorId  Int
  date      DateTime
  status    String
}

model OPDRecord {
  id           Int      @id @default(autoincrement())
<<<<<<< HEAD
  patientId    Int
=======
  patient      Patient  @relation(fields: [patientId], references: [id])
  patientId    Int
  doctor       Doctor   @relation(fields: [doctorId], references: [id])
>>>>>>> c00a5f06db257c64e0c99d1f392f8cf2bb00b1fc
  doctorId     Int
  notes        String
  prescription String
  date         DateTime
}

<<<<<<< HEAD
model IpdChart {
  id                     Int      @id @default(autoincrement())
  date                   DateTime
  chiefComplaints        String
  hopi                   String
  previousInvestigations String?
  systemicExamination    String?
  localExamination       String?
  provisionalDiagnosis   String?
  finalDiagnosis         String?
  patientId              Int
}

model Continuation {
  id           Int      @id @default(autoincrement())
  date         DateTime
  ClinicalNote String
  treatment    String
  patientId    Int
}

model Nursing {
  id          Int      @id @default(autoincrement())
  date        DateTime
  time        String
  pulse       Int
  bp          String
  rr          Int
  spo2        Int
  temperature Float
  intake      String?
  output      String?
  patientId   Int
=======
model IPDAdmission {
  id            Int       @id @default(autoincrement())
  patient       Patient   @relation(fields: [patientId], references: [id])
  patientId     Int
  room          Room      @relation(fields: [roomId], references: [id])
  roomId        Int
  admitDate     DateTime
  dischargeDate DateTime?
}

model Room {
  id            Int            @id @default(autoincrement())
  roomType      String
  isOccupied    Boolean        @default(false)
  ipdAdmissions IPDAdmission[]
}

model LabTest {
  id        Int     @id @default(autoincrement())
  patient   Patient @relation(fields: [patientId], references: [id])
  patientId Int
  doctor    Doctor  @relation(fields: [doctorId], references: [id])
  doctorId  Int
  testType  String
  result    String?
  status    String
}

model Medicine {
  id              Int              @id @default(autoincrement())
  name            String
  batch           String
  expiry          DateTime
  quantity        Int
  issuedMedicines IssuedMedicine[]
}

model IssuedMedicine {
  id         Int      @id @default(autoincrement())
  patient    Patient  @relation(fields: [patientId], references: [id])
  patientId  Int
  medicine   Medicine @relation(fields: [medicineId], references: [id])
  medicineId Int
  quantity   Int
  date       DateTime
}

model Inventory {
  id         Int       @id @default(autoincrement())
  name       String
  department String
  quantity   Int
  expiry     DateTime?
}

model Billing {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  amount    Float
  status    String
  billDate  DateTime
>>>>>>> c00a5f06db257c64e0c99d1f392f8cf2bb00b1fc
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  username String @unique
  password String
  role     String
}
