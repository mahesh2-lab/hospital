generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Patient {
  id                     Int       @id @default(autoincrement())
  mhrNo                  String
  uidNo                  String
  ipdNo                  String
  wardOrIcu              String
  bedRoomNo              String
  patientName            String?
  fatherName             String?
  aadharNo               String?
  age                    Int?
  sex                    String
  weight                 String?
  address                String?
  occupation             String?
  regNo                  String?
  dateOfAdmission        DateTime?
  dateOfDischarge        DateTime?
  dateOfOperation        String?
  surgeryPerformByDoctor String?
  anesthetistDoctor      String?
  referringDoctor        String?
  mlcNoPoliceStation     String?
  consultantName         String?
  emergencyContact       String?
  performByDoctor        String?
  doctorIncharge         String?
  broughtBy              String?
  statusOfDischarge      String?
  dischargeSummary       String?
  diseases               String?
  icdCode                String?
  provisionalDiagnosis   String?
  finalDiagnosis         String?
}

model Doctor {
  id             Int    @id @default(autoincrement())
  name           String
  department     String
  specialization String
  contact        String
}

model Appointment {
  id        Int      @id @default(autoincrement())
  patientId Int
  doctorId  Int
  date      DateTime
  status    String
}

model OPDRecord {
  id           Int      @id @default(autoincrement())
  patientId    Int
  doctorId     Int
  notes        String
  prescription String
  date         DateTime
}

model IpdChart {
  id                     Int      @id @default(autoincrement())
  date                   DateTime
  chiefComplaints        String
  hopi                   String
  patientId              Int
  finalDiagnosis         String?
  localExamination       String?
  previousInvestigations String?
  provisionalDiagnosis   String?
  systemicExamination    String?
}

model Continuation {
  id           Int      @id @default(autoincrement())
  date         DateTime
  ClinicalNote String
  treatment    String
  patientId    Int
}

model MedicationTracker {
  id          String   @id @default(cuid())
  patientId   Int // Optional: if you want user-specific trackers
  name        String?
  columnDates Json // Store array of 8 dates as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  medications Medication[]

  @@map("medication_trackers")
}

model Medication {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key to MedicationTracker
  trackerId String
  tracker   MedicationTracker @relation(fields: [trackerId], references: [id], onDelete: Cascade)

  schedules Schedule[]

  @@map("medications")
}

model Schedule {
  id        String  @id @default(cuid())
  column    Int // Column index (0-7 for 8 columns)
  morning   Boolean @default(false)
  afternoon Boolean @default(false)
  evening   Boolean @default(false)

  // Foreign key to Medication
  medicationId String
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@unique([medicationId, column]) // Ensure one schedule per medication per column
  @@map("schedules")
}

model Nursing {
  id          Int      @id @default(autoincrement())
  date        DateTime
  time        String
  pulse       Int
  bp          String
  rr          Int
  spo2        Int
  temperature Float
  intake      String?
  output      String?
  patientId   Int
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  username String @unique
  password String
  role     String
}
